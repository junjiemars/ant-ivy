options {
    MULTI=true;
    NODE_DEFAULT_VOID=true;
    STATIC=true;
    SUPPORT_CLASS_VISIBILITY_PUBLIC=true;
    TRACK_TOKENS=true;
}

PARSER_BEGIN(Jsql)

package org.mars;
import java.io.StringReader;
import java.io.Reader;
import static java.lang.System.out;

public final class Jsql {
    public Jsql(final String s) {
        this((Reader)(new StringReader(s)));
    }

    public final static void main(String[] args) {
        try {
            out.println("input:" + args[0]);
            Jsql jsql = new Jsql(args[0]);
            ASTsql n = jsql.start();
            n.dump("");
        } catch (final Exception e) {
            out.println(e.getMessage()); 
            e.printStackTrace(); 
        }
    }
}

PARSER_END(Jsql)

SKIP: {
    " "  |
    "\t" |
    "\n" |
    "\r" 
}

TOKEN: /* reserved */ {
    <SELECT: "select"> |
    <FROM: "from"> |
    <WHERE: "where"> |
    <INSERT: "insert"> |
    <INTO: "into"> |
    <VALUES: "values"> |
    <ORDER: "order"> |
    <BY: "by"> |
    <AND: "and"> |
    <OR: "or"> |
    <NOT: "not">
}

TOKEN: /* comparator */ {
    <EQ: "="> |
    <NE: "<>"> |
    <LT: "<"> |
    <GT: ">"> |
    <LE: "<="> |
    <GE: ">=">
}

TOKEN: /* parenthesis */ {
    <LP: "("> |
    <RP: ")">
}

TOKEN: /* number */ {
    <NUMBER: <NSIGN> (<DIGIT>)+ > |

    <#DIGIT: ["0"-"9"] > |
    <#NSIGN: ["+", "-"] >
}

TOKEN: /* identifier */ {
    <ID: <LETTER> (<LETTER>|<DIGIT>)* > |
    <#LETTER: ["_", "a"-"z", "A"-"Z"] >
}



ASTsql start() #sql : {
} {
    select() ";"
    { return (jjtThis); }
}

void select() #select : {
} {
    <SELECT>
    (
        fields()
    )
    <FROM>
    (
        tables()
    ) /*#select(>1)*/

    //[where()]
    { 
    }
}

void fields() #fields : {
} {
    fieldId() ("," fieldId())*
    //( fid=<ID> ("," fid=<ID>)* ) /*#fields(>1)*/
    //{
    //    out.println(fid.image);
    //}
}

void fieldId() #fieldId : {
    Token fid;
} {
   fid=<ID> 
   {
       //jjtThis.firstToken = fid;
       //jjtThis.lastToken = getToken(0);
       out.println(fid.image);
   }
}

void tables() #tables : {
} {
    tableId() ("," tableId())*
    //( /*tid=*/<ID> ("," <ID>)* ) #tables(>1)
    //{
    //    out.println(tid.image);
    //}
}

void tableId() #tableId : {
    Token tid;
} {
    tid=<ID>
    {
        out.println(tid.image);
    }
}
//
//void where() # where : {
//} {
//    <WHERE> (expressions())+
//}
//
//void expressions() # expressions : {
//} {
//    
//}
