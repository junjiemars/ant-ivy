/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Jsql.jj */
/*@egen*/options {
               
                           
    STATIC=true;
    SUPPORT_CLASS_VISIBILITY_PUBLIC=true;
                      
}

PARSER_BEGIN(Jsql)

package org.mars;
import java.io.StringReader;
import java.io.Reader;
import static java.lang.System.out;

public final class Jsql/*@bgen(jjtree)*/implements JsqlTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTJsqlState jjtree = new JJTJsqlState();

/*@egen*/
    public Jsql(final String s) {
        this((Reader)(new StringReader(s)));
    }

    public final static void main(String[] args) {
        try {
            out.println("input:" + args[0]);
            Jsql jsql = new Jsql(args[0]);
            ASTsql n = jsql.start();
            n.dump("");
        } catch (final Exception e) {
            out.println(e.getMessage()); 
            e.printStackTrace(); 
        }
    }
}

PARSER_END(Jsql)

SKIP: {
    " "  |
    "\t" |
    "\n" |
    "\r" 
}

TOKEN: /* reserved */ {
    <SELECT: "select"> |
    <FROM: "from"> |
    <WHERE: "where"> |
    <INSERT: "insert"> |
    <INTO: "into"> |
    <VALUES: "values"> |
    <ORDER: "order"> |
    <BY: "by"> |
    <AND: "and"> |
    <OR: "or"> |
    <NOT: "not">
}

TOKEN: /* comparator */ {
    <EQ: "="> |
    <NE: "<>"> |
    <LT: "<"> |
    <GT: ">"> |
    <LE: "<="> |
    <GE: ">=">
}

TOKEN: /* parenthesis */ {
    <LP: "("> |
    <RP: ")">
}

TOKEN: /* number */ {
    <NUMBER: <NSIGN> (<DIGIT>)+ > |

    <#DIGIT: ["0"-"9"] > |
    <#NSIGN: ["+", "-"] >
}

TOKEN: /* identifier */ {
    <ID: <LETTER> (<LETTER>|<DIGIT>)* > |
    <#LETTER: ["_", "a"-"z", "A"-"Z"] >
}



ASTsql start()      : {/*@bgen(jjtree) sql */
  ASTsql jjtn000 = new ASTsql(JJTSQL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
} {/*@bgen(jjtree) sql */
    try {
/*@egen*/
    select() ";"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    { return (jjtn000); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void select()         : {/*@bgen(jjtree) select */
  ASTselect jjtn000 = new ASTselect(JJTSELECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
} {/*@bgen(jjtree) select */
    try {
/*@egen*/
    <SELECT>
    (
        fields()
    )
    <FROM>
    (
        tables()
    )/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/ /*#select(>1)*/

    //[where()]
    { 
    }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void fields()         : {/*@bgen(jjtree) fields */
  ASTfields jjtn000 = new ASTfields(JJTFIELDS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
} {/*@bgen(jjtree) fields */
    try {
/*@egen*/
    fieldId() ("," fieldId())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
    //( fid=<ID> ("," fid=<ID>)* ) /*#fields(>1)*/
    //{
    //    out.println(fid.image);
    //}
}

void fieldId()          : {/*@bgen(jjtree) fieldId */
    ASTfieldId jjtn000 = new ASTfieldId(JJTFIELDID);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    Token fid;
} {/*@bgen(jjtree) fieldId */
   try {
/*@egen*/
   fid=<ID>/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtn000.jjtSetLastToken(getToken(0));
   }
/*@egen*/ 
   {
       //jjtThis.firstToken = fid;
       //jjtThis.lastToken = getToken(0);
       out.println(fid.image);
   }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
   }
/*@egen*/
}

void tables()         : {/*@bgen(jjtree) tables */
  ASTtables jjtn000 = new ASTtables(JJTTABLES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
} {/*@bgen(jjtree) tables */
    try {
/*@egen*/
    tableId() ("," tableId())*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
    //( /*tid=*/<ID> ("," <ID>)* ) #tables(>1)
    //{
    //    out.println(tid.image);
    //}
}

void tableId()          : {/*@bgen(jjtree) tableId */
    ASTtableId jjtn000 = new ASTtableId(JJTTABLEID);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
    jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
    Token tid;
} {/*@bgen(jjtree) tableId */
    try {
/*@egen*/
    tid=<ID>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
        out.println(tid.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}